RELEASE="$(curl -sSL https://dl.k8s.io/release/stable.txt)"
cd /usr/local/bin
sudo curl -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/${RELEASE}/bin/linux/amd64/{kubeadm,kubelet,kubectl}
sudo chmod +x {kubeadm,kubelet,kubectl}

# Download CNI plugins and install
CNI_VERSION="v0.8.2"
ARCH="amd64"
sudo mkdir -p /opt/cni/bin
curl -L "https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-linux-${ARCH}-${CNI_VERSION}.tgz" | sudo tar -C /opt/cni/bin -xz

# Create a kubelet systemd service
cat <<EOF | sudo tee /etc/systemd/system/kubelet.service
[Unit]
Description=Kubelet
Documentation=https://kubernetes.io/docs/home/
Wants=network-online.target
After=network-online.target

[Service]
ExecStart=/usr/local/bin/kubelet
Restart=always
StartLimitInterval=0
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

# Enable and start kubelet
sudo systemctl enable kubelet && sudo systemctl start kubelet

code ~/.bashrc

PS1="\[\e[0;32m\]┌──(\[\e[m\]\[\e[0;33m\]\u@\h\[\e[m\]\[\e[0;32m\])-\[\e[m\]\[\e[1;34m\][\w]\[\e[m\]\[\e[0;32m\]\n\[\e[m\]\[\e[0;32m\]└─\$\[\e[m\] "

source ~/.bashrc

# Disable VM Swap allow kubelet function correctly
sudo swapoff -a
sudo micro /etc/fstab
#/swap.img

sudo apt install docker.io -y
sudo apt install apt-transport-https curl -y

# repo key for download & install k8s
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
# add k8s repo
sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
sudo apt update
sudo apt install kubeadm kubelet kubectl kubernetes-cni -y

# USE THESE IF FAIL: build kubernetes cluster only having master node
sudo apt-add-repository --remove "deb http://apt.kubernetes.io/ kubernetes-xenial main"
curl -LO https://dl.k8s.io/release/v1.29.3/bin/linux/amd64/kubectl
curl -LO https://dl.k8s.io/release/v1.29.3/bin/linux/amd64/kubeadm
curl -LO https://dl.k8s.io/release/v1.29.3/bin/linux/amd64/kubelet
curl -LO https://github.com/containernetworking/plugins/releases/download/v1.4.1/cni-plugins-linux-amd64-v1.4.1.tgz
tar -xvf cni-plugins-linux-amd64-v1.4.1.tgz
chmod +x kubectl kubeadm kubelet
sudo mv kubectl kubeadm kubelet /usr/local/bin/

sudo mkdir -p /opt/cni/bin
sudo mv ./LICENSE ./host-device ./dummy ./README.md ./firewall ./macvlan ./bridge ./dhcp ./bandwidth ./tuning ./vlan ./ipvlan ./ptp ./static ./loopback ./tap ./host-local ./sbr ./portmap ./vrf /opt/cni/bin
-$ tar -xvf cni-plugins-linux-amd64-v1.4.1. tgz

dpkg -s apt-transport-https
dpkg -s docker.io
sudo systemctl is-active docker
sudo systemctl start docker
kubeadm version
kubelet --version
kubectl version
sudo systemctl is-active kubelet
sudo systemctl start kubelet
dpkg -s kubernetes-cni
ls /opt/cni/bin

sudo code /etc/systemd/system/kubelet.service

[Unit]
Description=Kubelet
Documentation=https://kubernetes.io/docs/home/
Wants=network-online.target
After=network-online.target

[Service]
ExecStart=/usr/local/bin/kubelet
Restart=always
StartLimitInterval=0
RestartSec=10

[Install]
WantedBy=multi-user.target

sudo systemctl daemon-reload
sudo systemctl start kubelet
sudo systemctl is-active kubelet

sudo kubeadm init #master
# copy kubeadm join 16..... paste to worker nodes to join k8s cluster on kmaster node

kubectl get pods -A
kubectl get nodes # master
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
kubectl get nodes
# status not ready
# deploy calico
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
kubectl get nodes
# status ready on 3 nodes and it's time to deploy pods