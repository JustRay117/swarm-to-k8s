import os
import sys
from unittest import TestCase, mock

sys.path.append('web-vote-app')  # add the path where app.py is located
from app import app  # import the actual application

class TestAppRoutes(TestCase):
    """App Routes Tests"""

    def setUp(self):
        """Runs before each test"""
        os.environ['WEB_VOTE_NUMBER'] = '1'  # add this line
        self.app = app
        self.app.testing = True  # enable testing mode
        self.client = self.app.test_client()

        # Mock the connect_to_redis function
        self.redis_mock = mock.MagicMock()
        self.connect_to_redis_patch = mock.patch('utils.connect_to_redis', return_value=self.redis_mock)
        self.connect_to_redis_patch.start()

    def tearDown(self):
        """Runs after each test"""
        # Stop mocking the connect_to_redis function
        self.connect_to_redis_patch.stop()

    def test_dump_env(self):
        """It should return environment variables"""
        response = self.client.get("/env")
        self.assertEqual(response.status_code, 200)

        # Check for some expected environment variables in the response
        self.assertIn('PATH', response.data.decode())
        self.assertIn('HOSTNAME', response.data.decode())

    # def test_index_route(self):
    #     """It should handle GET and POST requests"""
    #     # Send a GET request
    #     response = self.client.get("/")
    #     self.assertEqual(response.status_code, 200)

    #     # Send a POST request
    #     response = self.client.post("/", data={'vote': 'A'})
    #     self.assertEqual(response.status_code, 200)

    #     # Check that the 'voter_id' cookie is set
    #     self.assertIn('voter_id', response.headers.get('Set-Cookie'))
